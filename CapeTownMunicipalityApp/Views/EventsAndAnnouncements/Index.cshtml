@using Microsoft.AspNetCore.Mvc.Localization
@using CapeTownMunicipalityApp.Models
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = @Localizer["Events & Announcements"];
    var events = ViewBag.Events as IEnumerable<Event>;
    var categories = ViewBag.Categories as IEnumerable<EventCategory>;
    var dates = ViewBag.Dates as IEnumerable<DateTime>;
    
    var selectedCategory = ViewBag.SelectedCategory as EventCategory?;
    var selectedType = ViewBag.SelectedType as EventType?;
    var selectedStartDate = ViewBag.SelectedStartDate as DateTime?;
    var selectedEndDate = ViewBag.SelectedEndDate as DateTime?;
}

<style>
    .filter-container {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 30px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .filter-row {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        align-items: end;
    }
    
    .filter-group {
        display: flex;
        flex-direction: column;
        min-width: 150px;
    }
    
    .filter-group label {
        font-weight: 600;
        margin-bottom: 5px;
        color: #495057;
    }
    
    .filter-group select,
    .filter-group input {
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
    }
    
    .filter-group select:focus,
    .filter-group input:focus {
        outline: none;
        border-color: #B0C434;
        box-shadow: 0 0 0 2px rgba(176,196,52,0.25);
    }
    
    .btn-filter {
        background: #B0C434;
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        height: fit-content;
    }
    
    .btn-filter:hover {
        background: #B0C434;
    }
    
    .main-content {
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 30px;
    }
    
    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }
    
    .event-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
    }
    
    .event-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .event-card-header {
        padding: 15px;
        background: linear-gradient(135deg, #D95AA4 0%, #C60277 100%);
        color: white;
    }
    
    .event-card.announcement .event-card-header {
        background: linear-gradient(135deg, #C7E20B 0%, #D6EA4E 100%);
    }
    
    .event-title {
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 5px 0;
    }
    
    .event-type {
        font-size: 12px;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .event-card-body {
        padding: 15px;
    }
    
    .event-description {
        color: #6c757d;
        font-size: 14px;
        line-height: 1.4;
        margin-bottom: 10px;
    }
    
    .event-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 12px;
        color: #6c757d;
    }
    
    .event-date {
        font-weight: 600;
    }
    
    .event-category {
        background: #e9ecef;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 11px;
    }
    
    .recommendations-sidebar {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        padding: 20px;
        height: fit-content;
        position: sticky;
        top: 20px;
    }
    
    .recommendations-title {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 15px;
        color: #495057;
        border-bottom: 2px solid #B0C434;
        padding-bottom: 8px;
    }
    
    .recommendation-item {
        padding: 12px;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .recommendation-item:hover {
        border-color: #B0C434;
        background: #f8f9fa;
    }
    
    .recommendation-title {
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 5px;
        color: #495057;
    }
    
    .recommendation-date {
        font-size: 12px;
        color: #6c757d;
    }
    
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }
    
    .modal-content {
        background-color: white;
        margin: 5% auto;
        padding: 0;
        border-radius: 8px;
        width: 90%;
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    }
    
    .modal-header {
        background: linear-gradient(135deg, #D95AA4 0%, #C60277 100%);
        color: white;
        padding: 20px;
        border-radius: 8px 8px 0 0;
        position: relative;
    }
    
    .modal-header.announcement {
        background: linear-gradient(135deg, #C7E20B 0%, #D6EA4E 100%);
    }
    
    .modal-title {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
        padding-right: 40px;
    }
    
    .close {
        position: absolute;
        right: 20px;
        top: 20px;
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: background 0.2s;
    }
    
    .close:hover {
        background: rgba(255,255,255,0.2);
    }
    
    .modal-body {
        padding: 20px;
    }
    
    .modal-description {
        font-size: 16px;
        line-height: 1.6;
        color: #495057;
        margin-bottom: 20px;
    }
    
    .modal-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }
    
    .modal-detail-item {
        display: flex;
        flex-direction: column;
    }
    
    .modal-detail-label {
        font-weight: 600;
        color: #6c757d;
        font-size: 12px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 5px;
    }
    
    .modal-detail-value {
        color: #495057;
        font-size: 14px;
    }
    
    @@media (max-width: 768px) {
        .main-content {
            grid-template-columns: 1fr;
        }
        
        .filter-row {
            flex-direction: column;
            align-items: stretch;
        }
        
        .filter-group {
            min-width: auto;
        }
        
        .events-grid {
            grid-template-columns: 1fr;
        }
        
        .modal-details {
            grid-template-columns: 1fr;
        }
    }
    
    .back {
        position: fixed;
        left: 16px;
        top: 100px;
        width: 44px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px;
        background: #eee;
        cursor: pointer;
        z-index: 1000;
    }
    
    .back:hover {
        background: #ddd;
    }
</style>

<div class="container-fluid">
    <h1 class="mb-4 text-center">@Localizer["Events & Announcements"]</h1>
    
    <div class="filter-container">
        <form method="get" action="@Url.Action("Index")">
            <div class="filter-row">
                <div class="filter-group">
                    <label for="category">@Localizer["Category"]</label>
                    <select name="category" id="category">
                        <option value="">@Localizer["All Categories"]</option>
                        @foreach (var cat in categories)
                        {
                            <option value="@cat" selected="@(selectedCategory == cat)">
                                @Localizer[cat.ToString()]
                            </option>
                        }
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="type">@Localizer["Type"]</label>
                    <select name="type" id="type">
                        <option value="">@Localizer["All Types"]</option>
                        <option value="@EventType.Event" selected="@(selectedType == EventType.Event)">
                            @Localizer["Events"]
                        </option>
                        <option value="@EventType.Announcement" selected="@(selectedType == EventType.Announcement)">
                            @Localizer["Announcements"]
                        </option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="startDate">@Localizer["From Date"]</label>
                    <input type="date" name="startDate" id="startDate" value="@selectedStartDate?.ToString("yyyy-MM-dd")" />
                </div>
                
                <div class="filter-group">
                    <label for="endDate">@Localizer["To Date"]</label>
                    <input type="date" name="endDate" id="endDate" value="@selectedEndDate?.ToString("yyyy-MM-dd")" />
                </div>
                
                <button type="submit" class="btn-filter">@Localizer["Filter"]</button>
            </div>
        </form>
    </div>
    
    <div class="main-content">
        <div class="events-section">
            <div class="events-grid">
                @if (events != null && events.Any())
                {
                    @foreach (var evt in events)
                    {
                        <div class="event-card @(evt.Type == EventType.Announcement ? "announcement" : "")" 
                             onclick="openEventModal(@evt.Id, '@evt.Category')">
                            <div class="event-card-header">
                                <h3 class="event-title">@evt.Title</h3>
                                <div class="event-type">@Localizer[evt.Type.ToString()]</div>
                            </div>
                            <div class="event-card-body">
                                <p class="event-description">@evt.Description</p>
                                <div class="event-meta">
                                    <span class="event-date">@evt.Date.ToString("MMM dd, yyyy", System.Globalization.CultureInfo.InvariantCulture)</span>
                                    <span class="event-category">@Localizer[evt.Category.ToString()]</span>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="col-12">
                        <p class="text-center text-muted">@Localizer["No events found matching your criteria."]</p>
                    </div>
                }
            </div>
        </div>
        
        <div class="recommendations-sidebar">
            <h3 class="recommendations-title">@Localizer["Recommended for You"]</h3>
            <div id="recommendations-container">
            </div>
        </div>
    </div>
</div>

<div id="eventModal" class="modal">
    <div class="modal-content">
        <div id="modalContent">
        </div>
    </div>
</div>

<script>
    function trackInteraction(category) {
        let interactions = JSON.parse(localStorage.getItem('eventInteractions') || '{}');
        interactions[category] = (interactions[category] || 0) + 1;
        localStorage.setItem('eventInteractions', JSON.stringify(interactions));
        
        fetch('@Url.Action("TrackInteraction")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'category=' + encodeURIComponent(category)
        });
        
        loadRecommendations();
    }
    
    function openEventModal(eventId, category) {
        trackInteraction(category);
        
        fetch('@Url.Action("GetEventDetails")' + '?id=' + eventId)
            .then(response => response.text())
            .then(html => {
                document.getElementById('modalContent').innerHTML = html;
                document.getElementById('eventModal').style.display = 'block';
            })
            .catch(error => console.error('Error:', error));
    }
    
    // Close modal
    function closeModal() {
        document.getElementById('eventModal').style.display = 'none';
    }
    
    function loadRecommendations() {
        const interactions = localStorage.getItem('eventInteractions') || '{}';
        
        fetch('@Url.Action("GetRecommendations")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'userInteractions=' + encodeURIComponent(interactions)
        })
        .then(response => response.text())
        .then(html => {
            document.getElementById('recommendations-container').innerHTML = html;
        })
        .catch(error => console.error('Error:', error));
    }
    
    window.onclick = function(event) {
        const modal = document.getElementById('eventModal');
        if (event.target == modal) {
            closeModal();
        }
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        loadRecommendations();
    });
</script>

<div class="back" onclick="location.href='/'">
    <svg width="20" height="20" viewBox="0 0 24 24">
        <path d="M15 18l-6-6 6-6" stroke="#333" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round" />
    </svg>
</div>
